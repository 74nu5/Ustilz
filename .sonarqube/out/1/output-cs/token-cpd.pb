Ï)
ZC:\Users\ravonde\Documents\Projets\C#\Repos Git\Ustilz\Ustilz.Test\Enums\EnumHelperTest.cs
	namespace 	
Ustilz
 
. 
Test 
. 
Enums 
{ 
public 

sealed 
class 
EnumHelperTest &
{ 
private 
enum 
TestEnum 
{ 	
[ 
Display 
] 
Valeur1 
, 
Valeur2 
, 
[ 
Display 
( 
Description  
=! "
$str# 5
)5 6
]6 7
Valeur3 
}   	
['' 	
Fact''	 
]'' 
public(( 
void(( '
TestGetEnumDescriptionEmpty(( /
(((/ 0
)((0 1
{)) 	
var** 
descriptionValeur1** "
=**# $

EnumHelper**% /
.**/ 0
GetEnumDescription**0 B
(**B C
TestEnum**C K
.**K L
Valeur1**L S
)**S T
;**T U
Assert++ 
.++ 
Equal++ 
(++ 
string++ 
.++  
Empty++  %
,++% &
descriptionValeur1++' 9
)++9 :
;++: ;
},, 	
[// 	
Fact//	 
]// 
public00 
void00 0
$TestGetEnumDescriptionWithoutDisplay00 8
(008 9
)009 :
{11 	
var22 
descriptionValeur222 "
=22# $

EnumHelper22% /
.22/ 0
GetEnumDescription220 B
(22B C
TestEnum22C K
.22K L
Valeur222L S
)22S T
;22T U
Assert33 
.33 
Equal33 
(33 
$str33 "
,33" #
descriptionValeur233$ 6
)336 7
;337 8
}44 	
[77 	
Fact77	 
]77 
public88 
void88 )
TestGetEnumDescriptionNominal88 1
(881 2
)882 3
{99 	
var:: 
descriptionValeur3:: "
=::# $

EnumHelper::% /
.::/ 0
GetEnumDescription::0 B
(::B C
TestEnum::C K
.::K L
Valeur3::L S
)::S T
;::T U
Assert;; 
.;; 
Equal;; 
(;; 
$str;; +
,;;+ ,
descriptionValeur3;;- ?
);;? @
;;;@ A
}<< 	
[?? 	
Fact??	 
]?? 
public@@ 
void@@ )
TestGetEnumDescriptionNotEnum@@ 1
(@@1 2
)@@2 3
{AA 	
varBB 
classeBB 
=BB 
newBB 

TestClasseBB '
(BB' (
)BB( )
;BB) *
AssertCC 
.CC 
ThrowsCC 
<CC 
ArgumentExceptionCC +
>CC+ ,
(CC, -
$strCC- 4
,CC4 5
(CC6 7
)CC7 8
=>CC9 ;

EnumHelperCC< F
.CCF G
GetEnumDescriptionCCG Y
(CCY Z
classeCCZ `
)CC` a
)CCa b
;CCb c
}DD 	
[GG 	
FactGG	 
]GG 
publicHH 
voidHH .
"TestToDescriptionDictionaryNominalHH 6
(HH6 7
)HH7 8
{II 	
varJJ !
descriptionDictionaryJJ %
=JJ& '

EnumHelperJJ( 2
.JJ2 3#
ToDescriptionDictionaryJJ3 J
<JJJ K
TestEnumJJK S
>JJS T
(JJT U
)JJU V
;JJV W
AssertKK 
.KK 
NotEmptyKK 
(KK !
descriptionDictionaryKK 1
)KK1 2
;KK2 3
AssertLL 
.LL 
EqualLL 
(LL 
$numLL 
,LL !
descriptionDictionaryLL 1
.LL1 2
CountLL2 7
)LL7 8
;LL8 9
AssertMM 
.MM 
EqualMM 
(MM 
stringMM 
.MM  
EmptyMM  %
,MM% &!
descriptionDictionaryMM' <
[MM< =
$strMM= F
]MMF G
)MMG H
;MMH I
AssertNN 
.NN 
NullNN 
(NN !
descriptionDictionaryNN -
[NN- .
$strNN. 7
]NN7 8
)NN8 9
;NN9 :
AssertOO 
.OO 
EqualOO 
(OO 
$strOO +
,OO+ ,!
descriptionDictionaryOO- B
[OOB C
$strOOC L
]OOL M
)OOM N
;OON O
}PP 	
[SS 	
FactSS	 
]SS 
publicTT 
voidTT .
"TestToDescriptionDictionaryNotEnumTT 6
(TT6 7
)TT7 8
=>TT9 ;
AssertTT< B
.TTB C
ThrowsTTC I
<TTI J
ArgumentExceptionTTJ [
>TT[ \
(TT\ ]
$strTT] `
,TT` a
(TTb c
)TTc d
=>TTe g

EnumHelperTTh r
.TTr s$
ToDescriptionDictionary	TTs Š
<
TTŠ ‹

TestClasse
TT‹ •
>
TT• –
(
TT– —
)
TT— ˜
)
TT˜ ™
;
TT™ š
private[[ 
class[[ 

TestClasse[[  
{\\ 	
}]] 	
}`` 
}aa ÐE
VC:\Users\ravonde\Documents\Projets\C#\Repos Git\Ustilz\Ustilz.Test\Time\HorlogeTest.cs
	namespace 	
Ustilz
 
. 
Test 
. 
Time 
{ 
public

 

class

 
HorlogeTest

 
{ 
[ 	
Fact	 
] 
public 
void 
MaintenantTest "
(" #
)# $
{ 	
var 
now 
= 
DateTime 
. 
Now "
;" #
var 

maintenant 
= 
Horloge $
.$ %

Maintenant% /
;/ 0
Assert 
. 
Equal 
( 
now 
. 
Day  
,  !

maintenant" ,
., -
Day- 0
)0 1
;1 2
Assert 
. 
Equal 
( 
now 
. 
Hour !
,! "

maintenant# -
.- .
Hour. 2
)2 3
;3 4
Assert 
. 
Equal 
( 
now 
. 
Month "
," #

maintenant$ .
.. /
Month/ 4
)4 5
;5 6
Assert 
. 
Equal 
( 
now 
. 
Minute #
,# $

maintenant% /
./ 0
Minute0 6
)6 7
;7 8
Assert 
. 
Equal 
( 
now 
. 
Year !
,! "

maintenant# -
.- .
Year. 2
)2 3
;3 4
Assert 
. 
Equal 
( 
now 
. 
Second #
,# $

maintenant% /
./ 0
Second0 6
)6 7
;7 8
} 	
[ 	
Fact	 
] 
public 
void "
FonctionMaintenantTest *
(* +
)+ ,
{ 	
Horloge 
. !
SetFonctionMaintenant )
=* +
(, -
)- .
=>/ 1
new2 5
DateTime6 >
(> ?
$num? C
,C D
$numE F
,F G
$numH J
)J K
;K L
var 

maintenant 
= 
Horloge $
.$ %

Maintenant% /
;/ 0
Assert   
.   
Equal   
(   
$num   
,   

maintenant   &
.  & '
Day  ' *
)  * +
;  + ,
Assert!! 
.!! 
Equal!! 
(!! 
$num!! 
,!! 

maintenant!! &
.!!& '
Hour!!' +
)!!+ ,
;!!, -
Assert"" 
."" 
Equal"" 
("" 
$num"" 
,"" 

maintenant"" &
.""& '
Month""' ,
)"", -
;""- .
Assert## 
.## 
Equal## 
(## 
$num## 
,## 

maintenant## &
.##& '
Minute##' -
)##- .
;##. /
Assert$$ 
.$$ 
Equal$$ 
($$ 
$num$$ 
,$$ 

maintenant$$ )
.$$) *
Year$$* .
)$$. /
;$$/ 0
Assert%% 
.%% 
Equal%% 
(%% 
$num%% 
,%% 

maintenant%% &
.%%& '
Second%%' -
)%%- .
;%%. /
Horloge'' 
.'' !
SetFonctionMaintenant'' )
=''* +
null'', 0
;''0 1
var)) 
now)) 
=)) 
DateTime)) 
.)) 
Now)) "
;))" #

maintenant** 
=** 
Horloge**  
.**  !

Maintenant**! +
;**+ ,
Assert,, 
.,, 
Equal,, 
(,, 
now,, 
.,, 
Day,,  
,,,  !

maintenant,," ,
.,,, -
Day,,- 0
),,0 1
;,,1 2
Assert-- 
.-- 
Equal-- 
(-- 
now-- 
.-- 
Hour-- !
,--! "

maintenant--# -
.--- .
Hour--. 2
)--2 3
;--3 4
Assert.. 
... 
Equal.. 
(.. 
now.. 
... 
Month.. "
,.." #

maintenant..$ .
.... /
Month../ 4
)..4 5
;..5 6
Assert// 
.// 
Equal// 
(// 
now// 
.// 
Minute// #
,//# $

maintenant//% /
./// 0
Minute//0 6
)//6 7
;//7 8
Assert00 
.00 
Equal00 
(00 
now00 
.00 
Year00 !
,00! "

maintenant00# -
.00- .
Year00. 2
)002 3
;003 4
Assert11 
.11 
Equal11 
(11 
now11 
.11 
Second11 #
,11# $

maintenant11% /
.11/ 0
Second110 6
)116 7
;117 8
}22 	
[44 	
Fact44	 
]44 
public55 
void55 
	ResetTest55 
(55 
)55 
{66 	
Horloge77 
.77 !
SetFonctionMaintenant77 )
=77* +
(77, -
)77- .
=>77/ 1
new772 5
DateTime776 >
(77> ?
$num77? C
,77C D
$num77E F
,77F G
$num77H J
)77J K
;77K L
var88 

maintenant88 
=88 
Horloge88 $
.88$ %

Maintenant88% /
;88/ 0
Assert:: 
.:: 
Equal:: 
(:: 
$num:: 
,:: 

maintenant:: &
.::& '
Day::' *
)::* +
;::+ ,
Assert;; 
.;; 
Equal;; 
(;; 
$num;; 
,;; 

maintenant;; &
.;;& '
Hour;;' +
);;+ ,
;;;, -
Assert<< 
.<< 
Equal<< 
(<< 
$num<< 
,<< 

maintenant<< &
.<<& '
Month<<' ,
)<<, -
;<<- .
Assert== 
.== 
Equal== 
(== 
$num== 
,== 

maintenant== &
.==& '
Minute==' -
)==- .
;==. /
Assert>> 
.>> 
Equal>> 
(>> 
$num>> 
,>> 

maintenant>> )
.>>) *
Year>>* .
)>>. /
;>>/ 0
Assert?? 
.?? 
Equal?? 
(?? 
$num?? 
,?? 

maintenant?? &
.??& '
Second??' -
)??- .
;??. /
HorlogeAA 
.AA 
ResetAA 
(AA 
)AA 
;AA 
varCC 
nowCC 
=CC 
DateTimeCC 
.CC 
NowCC "
;CC" #

maintenantDD 
=DD 
HorlogeDD  
.DD  !

MaintenantDD! +
;DD+ ,
AssertFF 
.FF 
EqualFF 
(FF 
nowFF 
.FF 
DayFF  
,FF  !

maintenantFF" ,
.FF, -
DayFF- 0
)FF0 1
;FF1 2
AssertGG 
.GG 
EqualGG 
(GG 
nowGG 
.GG 
HourGG !
,GG! "

maintenantGG# -
.GG- .
HourGG. 2
)GG2 3
;GG3 4
AssertHH 
.HH 
EqualHH 
(HH 
nowHH 
.HH 
MonthHH "
,HH" #

maintenantHH$ .
.HH. /
MonthHH/ 4
)HH4 5
;HH5 6
AssertII 
.II 
EqualII 
(II 
nowII 
.II 
MinuteII #
,II# $

maintenantII% /
.II/ 0
MinuteII0 6
)II6 7
;II7 8
AssertJJ 
.JJ 
EqualJJ 
(JJ 
nowJJ 
.JJ 
YearJJ !
,JJ! "

maintenantJJ# -
.JJ- .
YearJJ. 2
)JJ2 3
;JJ3 4
AssertKK 
.KK 
EqualKK 
(KK 
nowKK 
.KK 
SecondKK #
,KK# $

maintenantKK% /
.KK/ 0
SecondKK0 6
)KK6 7
;KK7 8
}LL 	
}MM 
}NN Ç
WC:\Users\ravonde\Documents\Projets\C#\Repos Git\Ustilz\Ustilz.Test\UI\ColorUtilsTest.cs
	namespace 	
Ustilz
 
. 
Test 
. 
UI 
{ 
public

 

class

 
ColorUtilsTest

 
{ 
[ 	
Fact	 
] 
public 
void 
GenererCouleursTest '
(' (
)( )
{ 	
var 
couleur 
= 

ColorUtils $
.$ %
GenererCouleur% 3
(3 4
)4 5
;5 6
Assert 
. 
Equal 
( 
$num 
, 
couleur #
.# $
Length$ *
)* +
;+ ,
} 	
[ 	
Theory	 
] 
[ 	

InlineData	 
( 
$str 
) 
] 
[ 	

InlineData	 
( 
$str 
) 
] 
[ 	

InlineData	 
( 
$str 
) 
] 
[ 	

InlineData	 
( 
$str 
) 
] 
public 
void &
GetColorFromNomTestNominal .
(. /
string/ 5
nom6 9
)9 :
{ 	
var 
colorFromNom 
= 

ColorUtils )
.) *
GetColorFromNom* 9
(9 :
nom: =
)= >
;> ?
Assert 
. 
Equal 
( 
$num 
, 
colorFromNom (
.( )
Length) /
)/ 0
;0 1
} 	
} 
} 