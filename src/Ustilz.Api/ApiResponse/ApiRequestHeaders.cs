namespace Ustilz.Api.ApiResponse;

using JetBrains.Annotations;

using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

using Ustilz.Models;

/// <summary>
///     Record which represents the eat mapi headers request.
/// </summary>
/// <param name="CorrelationId">The correlation id.</param>
/// <param name="FunctionalId">The functional id.</param>
/// <param name="TechnicalId">The technical id.</param>
[PublicAPI]
public sealed record ApiRequestHeaders(Guid CorrelationId, string FunctionalId, Guid TechnicalId) : ServiceMonitoringDefinition(CorrelationId, FunctionalId)
{
    /// <summary>
    ///     The correlation id key.
    ///     <remarks>
    ///         It's generated by the first call.
    ///     </remarks>
    /// </summary>
    public const string CorrelationIdKey = "correlation-id";

    /// <summary>
    ///     The functional id key.
    /// </summary>
    public const string FunctionalIdKey = "functional-id";

    /// <summary>
    ///     The technical id key.
    /// </summary>
    public const string TechnicalIdKey = "technical-id";

    /// <summary>
    ///     Method which bind monitoring ids present in the headers to a <see cref="ApiRequestHeaders" /> object.
    /// </summary>
    /// <param name="context">The http context.</param>
    /// <returns>Returns the headers object.</returns>
    [UsedImplicitly]
    public static ValueTask<ApiRequestHeaders> BindAsync(HttpContext context)
    {
        _ = Guid.TryParse(context.Request.Headers[CorrelationIdKey], out var correlationIdHeader);
        _ = Guid.TryParse(context.Request.Headers[TechnicalIdKey], out var technicalIdKeyHeader);
        var functionalId = context.Request.Headers[FunctionalIdKey].FirstOrDefault() ?? Guid.NewGuid().ToString();

        var loggerFactory = context.RequestServices.GetRequiredService<ILoggerFactory>();
        var logger = loggerFactory.CreateLogger(typeof(ApiRequestHeaders));

        logger.LogInformation(
            $"{nameof(ApiRequestHeaders)}: {nameof(CorrelationId)}: {correlationIdHeader}, {nameof(FunctionalId)}: {functionalId}, {nameof(TechnicalId)}: {technicalIdKeyHeader}");

        var result = new ApiRequestHeaders(correlationIdHeader, functionalId, technicalIdKeyHeader);

        return ValueTask.FromResult(result);
    }
}
