#nullable enable
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.GetAllAsync(System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TModel!>!>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.GetAllWithIncludesAsync(System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken), params System.Linq.Expressions.Expression<System.Func<TModel!, object!>!>![]! includes) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TModel!>!>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.GetAllWithSkipTakeAsync(int skip, int take, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TModel!>!>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.GetDetailsWithIncludesAsync(TIdentity id, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken), params System.Linq.Expressions.Expression<System.Func<TModel!, object!>!>![]! includes) -> System.Threading.Tasks.Task<TModel>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.AddAsync(TModel! model, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.AddRangeAsync(System.Collections.Generic.IEnumerable<TModel!>! models, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.ExistsAsync(TIdentity id, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.GetDetailsAsync(TIdentity id, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TModel>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.Queryable.get -> System.Linq.IQueryable<TModel!>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.RemoveAllAsync(System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.RemoveAsync(TModel! model, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.RemoveRangeAsync(System.Collections.Generic.IEnumerable<TModel!>! models, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.UpdateAsync(TModel! model, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IBaseDAL<TModel, TIdentity>.UpdateRangeAsync(System.Collections.Generic.IEnumerable<TModel!>! models, System.Threading.CancellationToken stoppingToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
Ustilz.Data.Interfaces.IDto<TIdentity>
Ustilz.Data.Interfaces.IDto<TIdentity>.Id.get -> TIdentity


