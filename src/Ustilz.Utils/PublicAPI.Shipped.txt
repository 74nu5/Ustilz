#nullable enable
static Ustilz.Utils.Strings.MustBePositive(object? numericValue) -> string!
static Ustilz.Utils.Check.HasNoNulls<T>(System.Collections.Generic.IReadOnlyList<T?>! collection, string! parameterName) -> System.Collections.Generic.IReadOnlyList<T?>!
Ustilz.Utils.AutoOperators
Ustilz.Utils.AutoOperators.AutoOperators() -> void
Ustilz.Utils.Check
Ustilz.Utils.Strings
Ustilz.Utils.ThrowHelper
abstract Ustilz.Utils.AutoOperators.CompareTo(object? obj) -> int
override Ustilz.Utils.AutoOperators.Equals(object? obj) -> bool
override abstract Ustilz.Utils.AutoOperators.GetHashCode() -> int
static Ustilz.Utils.AutoOperators.Compare(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> int
static Ustilz.Utils.AutoOperators.operator !=(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.AutoOperators.operator <(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.AutoOperators.operator <=(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.AutoOperators.operator ==(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.AutoOperators.operator >(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.AutoOperators.operator >=(Ustilz.Utils.AutoOperators? obj1, Ustilz.Utils.AutoOperators? obj2) -> bool
static Ustilz.Utils.Check.NotEmpty(string! value, string! parameterName) -> string!
static Ustilz.Utils.Check.NotEmpty<T>(System.Collections.Generic.IReadOnlyList<T?>! value, string! parameterName) -> System.Collections.Generic.IReadOnlyList<T?>!
static Ustilz.Utils.Check.NotNull<T>(T value, string! parameterName) -> T
static Ustilz.Utils.Check.NotNull<T>(T value, string! parameterName, string! propertyName) -> T
static Ustilz.Utils.Check.NullButNotEmpty(string? value, string! parameterName) -> string?
static Ustilz.Utils.Check.ValidEntityType(System.Type! value, string! parameterName) -> System.Type!
static Ustilz.Utils.Strings.ArgumentIsEmpty(object? argumentName) -> string!
static Ustilz.Utils.Strings.ArgumentPropertyNull(object? property, object! argument) -> string!
static Ustilz.Utils.Strings.CollectionArgumentIsEmpty(object? argumentName) -> string!
static Ustilz.Utils.Strings.InvalidEntityType(object? type, object? argumentName) -> string!
static Ustilz.Utils.ThrowHelper.ThrowArgumentNullException(string! argument) -> void
static Ustilz.Utils.ThrowHelper.ThrowArgumentOutOfRangeException(string! argument) -> void
static Ustilz.Utils.ThrowHelper.ThrowMoreThanOneElementException() -> void
static Ustilz.Utils.ThrowHelper.ThrowMoreThanOneMatchException() -> void
static Ustilz.Utils.ThrowHelper.ThrowNoElementsException() -> void
static Ustilz.Utils.ThrowHelper.ThrowNoMatchException() -> void
static Ustilz.Utils.ThrowHelper.ThrowNotSupportedException() -> void
static Ustilz.Utils.Check.EnsurePositive(double numeric) -> double
static Ustilz.Utils.Check.EnsurePositive(int numeric) -> int
